Git戦略

Gitとは
開発を行う際に広く使用されている分散型バージョン管理システム。
ファイルのバージョン管理がおこなえるため変更履歴の記録・追跡を実施できるようになる。
チーム内での修正箇所の共有や不具合の起きた際でのバージョン変更などにも使用でき、
現在の開発ではなくてはならないシステムの1つ。
バージョン管理システムとして有名どころというと「Git」「Subversion」「Mercurial」などがあげられる。
今回現場での使用はGitでの管理が多いためこちらに焦点をあげて運用管理方法を記載する

Git戦略とは
Gitで作成するブランチについて計画的に行得られるように広まった運用方法のことを指す。
代表的なものとしては下記3つ。開発規模や予定される人数により運用方法は変わってくるかと思われるが、
個人では[git-flow]の環境の現場が多い状態であったため最低でもこちらは頭の片隅にでも置いてもらいたい。

・git-flow
・GitHub Flow
・trunk

上記について箇条書きレベルであるが説明していく


git-flow
中規模以上の開発に対して向いている運用方法。
大きく5種類にメインブランチが分類されており、それぞれに対応する項目配下にブランチを作成し運用を行っていく。


主要ブランチ分類
master:プロダクトのリリース済みのソースを管理するブランチ。
システムとしてはメインとなる物となり、リリースごとにタグ付けを行う。

hotfix:緊急性の高いバグなど現在のプロダクトのバージョンに関する修正用ブランチ
[master]から分岐し、作業が完了後は[master]と[develop]へマージを行う。

release branches:プロダクトのリリース準備の際に使用するブランチ。リリースの際に使用するのは基本こちら。
リリース予定の機能やバグ修正など反映された[develop]ブランチから分岐。

develop:開発ブランチ。
リリースが完了後の[master]から切り分けられる。
競合についてはこれ以上のブランチには持ち込まず、基本feature上で対処する。

feature branches:作業用のブランチ。機能の追加などの際に使用。
[develop]から分岐し、 [develop] にマージする


GitHub Flow
中規模以下の開発に向いている運用方法
基本2～3種類のメインブランチを用いて開発を進めていく。
主要ブランチ分類
master:プロダクトのリリース済みのソースを管理するブランチ。
システムとしてはメインとなる物となり、リリースごとにタグ付けを行う。

work branches:機能の追加や緊急修正など作業を行う際に使用するブランチ。
[git-flow]の[hotfix][feature branches]ブランチに該当。
切り分けは[master]から行い作業が終了後は[integration branches]にマージを行う

integration branches:統合用のブランチ。こちらは運用方法によっては省かれる。
[git-flow]の[release][develop]ブランチに該当。
リリース準備用のブランチとして使用しリリース後は[master]にマージを行う。
※[integration branches]を省いた際は[master]が[release]と[develop]の役割を担う

trunk
開発単位を小さく保ち、少人数・短期間での開発を行う際に使用する運用方法。
ブランチ事の最終コミットがそのリリースの最終定義となり基本的にリリースを行ったマイルストーンブランチは作業を行わなくなる。
期間を区切っての切り分けとなるためチーム体制やリリースの考え方など綿密に見直す必要がある。

主要ブランチ分類
stable:プロダクトのリリース管理管理を行うブランチ。
[git-flow]の[master]ブランチに該当。基本的にすでにリリースしているものや、いつでもリリース可能な物を管理するブランチとなる。

Milestone{number}:バージョンごとにブランチを管理する。
[git-flow]の[release][develop][hotfix][feature branches]すべてに該当。
バージョンは期間ごとマイルストーンごとに管理するため期間に間に合わないものに対しては次のブランチに振り分けながら作業を行う形となる。

余談1：Git-Hub と　Git-Lab の違いについて
ともにGitを管理する際によくあげられるツールで簡単に記述すると下記のような物となる。
違いとしては下記のものがあげられ、何を重視するのかにより使用を変更することをおすすめする。

余談2;Gitでよく使われるコマンドについて


参考：
Qiita
https://qiita.com/trsn_si/items/cfecbf7dff20c64628ea
https://qiita.com/itawn/items/959d3a0383bb384c5426
SamuraiEngineer
https://www.sejuku.net/blog/5756#index_id0
